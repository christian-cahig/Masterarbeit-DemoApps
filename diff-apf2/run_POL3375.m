%% Initializations
SNAPSHOT_ID = 'POL3375';

% For generating dispatch data sets
[PD_MUL_MIN, PD_MUL_MAX] = deal(0.95, 1.05);
[QD_MUL_MIN, QD_MUL_MAX] = deal(0.95, 1.05);
[RS_MUL_MIN, RS_MUL_MAX] = deal(0.99, 1.01);
[XS_MUL_MIN, XS_MUL_MAX] = deal(0.99, 1.01);
[BC_MUL_MIN, BC_MUL_MAX] = deal(0.99, 1.01);

% For run times
NUM_RUNS = 100;

% For finite-differences
FINDIF_STEP = 1e-2;

%% Go-to MATPOWER options
mpopt = getGoToMPOpts();

%% Snapshot data
load(sprintf("../snapshots/%s.mat", SNAPSHOT_ID));

%% Dispatch data
ddata = makeDispData(sdata, MPOptions=mpopt, ...
    PdScaleRange=[PD_MUL_MIN; PD_MUL_MAX], ...
    QdScaleRange=[QD_MUL_MIN; QD_MUL_MAX], ...
    RScaleRange=[RS_MUL_MIN; RS_MUL_MAX], ...
    XScaleRange=[XS_MUL_MIN; XS_MUL_MAX], ...
    BScaleRange=[BC_MUL_MIN; BC_MUL_MAX], ...
    assertOPFOk=false);
while ~ddata.success
    ddata = makeDispData(sdata, MPOptions=mpopt, ...
        PdScaleRange=[PD_MUL_MIN; PD_MUL_MAX], ...
        QdScaleRange=[QD_MUL_MIN; QD_MUL_MAX], ...
        RScaleRange=[RS_MUL_MIN; RS_MUL_MAX], ...
        XScaleRange=[XS_MUL_MIN; XS_MUL_MAX], ...
        BScaleRange=[BC_MUL_MIN; BC_MUL_MAX], ...
        assertOPFOk=false);
end

%% Problem data
pdata = buildProbData(sdata, ddata, calcCft=true, calcCu=true, calcCd=true, calcY=true);
clear sdata ddata;

%% Anticipated supply injections
cvx_solver Mosek;
[Ph, Qh] = calcPhQh(pdata.dispatch, Vm=pdata.snapshot.var.val.Vm);
[Po, Qo] = calcPoQo(pdata.dispatch, Vm=pdata.snapshot.var.val.Vm, Va=pdata.snapshot.bus(:, 9));
apf1 = solveExtdEconDisp(pdata, Ph=Ph, Qh=Qh, Po=Po, Qo=Qo);
clear Ph Qh Po Qo;

%% Solve APF equations
Ps_min = sum(apf1.Pu_min) - sum(apf1.Pu);
Ps_max = sum(apf1.Pu_max) - sum(apf1.Pu);
InitPs = 0.5 * (Ps_min + Ps_max);
PsDistribs = apf1.Pu_max - apf1.Pu_min; PsDistribs = PsDistribs / sum(PsDistribs);
config = optimoptions("fsolve", ...
    Algorithm='levenberg-marquardt', ...
    SpecifyObjectiveGradient=true, ...
    FunctionTolerance=1e-8, ...
    SubproblemAlgorithm='factorization', ...
    InitDamping=1e-2, ...
    ScaleProblem='none', ...
    FiniteDifferenceStepSize=sqrt(eps), ...
    MaxIterations=100, ...
    MaxFunctionEvaluations=max(1000, 500 * pdata.N_b), ...
    Display='off');
apf2 = solveAPFEqns(pdata, config, ...
    Pu=apf1.Pu, Qu=apf1.Qu, ...
    InitVm=pdata.snapshot.var.val.Vm, ...
    InitVa=pdata.snapshot.var.val.Va, ...
    InitPs=InitPs, PsDistribs=PsDistribs);
clear Ps_min Ps_max;

%% Jacobian of solutions of the APF equations w.r.t. anticipated supply injections
DPhiDX = apf2.Jac;
Cb = [pdata.Cu, sparse(pdata.N_b, pdata.N_u); sparse(pdata.N_b, pdata.N_u), pdata.Cu];
rtimes = zeros([NUM_RUNS, 1]);
parfor i = 1:NUM_RUNS
    t0 = tic; mldivide(DPhiDX, Cb); rtimes(i) = toc(t0);
end
DXDC = mldivide(apf2.Jac, Cb);
[DXDCTimeAve, DXDCTimeStd] = deal(mean(rtimes), std(rtimes));
clear rtimes;

%% Gradient of the distributed slack w.r.t. anticipated supply injections
dPsdC = DXDC(end, :).'; [dPsdCTimeAve, dPsdCTimeStd] = deal(DXDCTimeAve, DXDCTimeStd);

%% Metric and its gradient & Jacobian w.r.t. anticipated supply injections
met = calcMetric(pdata, apf2.Vm, apf2.Va, apf2.Ps);
dF = met.dF;
rtimes = zeros([NUM_RUNS, 1]);
parfor i = 1:NUM_RUNS
    t0 = tic; mldivide(DPhiDX, Cb).' * dF; rtimes(i) = toc(t0);
end
dFdC = (DXDC.') * dF;
[dFdCTimeAve, dFdCTimeStd] = deal(mean(rtimes), std(rtimes));
rtimes = zeros([NUM_RUNS, 1]);
parfor i = 1:NUM_RUNS
    t0 = tic; (mldivide(DPhiDX.', dF)).' * Cb; rtimes(i) = toc(t0);
end
DFDC = (mldivide(apf2.Jac.', met.dF)).' * Cb;
[DFDCTimeAve, DFDCTimeStd] = deal(mean(rtimes), std(rtimes));
clear DPhiDX Cb dF rtimes;

%% Finite-difference approximations of the gradients
N_u = pdata.N_u;
[dPsdCTimes_, dFdCTimes_] = deal(zeros([2*N_u, 1]), zeros([2*N_u, 1]));
[dPsdC_, dFdC_] = deal(zeros([2*N_u, 1]), zeros([2*N_u, 1]));
parfor i = 1 : 2*N_u
    t0 = tic;
    [Pu, Qu] = deal(apf1.Pu, apf1.Qu);
    if i <= N_u
        Pu(i) = Pu(i) + FINDIF_STEP;
    else
        Qu(i-N_u) = Qu(i-N_u) + FINDIF_STEP;
    end
    vol = solveAPFEqns(pdata, config, ...
        Pu=Pu, Qu=Qu, ...
        InitVm=pdata.snapshot.var.val.Vm, ...
        InitVa=pdata.snapshot.var.val.Va, ...
        InitPs=InitPs, PsDistribs=PsDistribs);
    dPsdC_(i) = vol.Ps; dPsdCTimes_(i) = toc(t0);
    fun = calcMetric(pdata, vol.Vm, vol.Va, vol.Ps, getGradient=false);
    dFdC_(i) = fun.F; dFdCTimes_(i) = toc(t0);
end
parfor i = 1 : 2*N_u
    t0 = tic;
    [Pu, Qu] = deal(apf1.Pu, apf1.Qu);
    if i <= N_u
        Pu(i) = Pu(i) - FINDIF_STEP;
    else
        Qu(i-N_u) = Qu(i-N_u) - FINDIF_STEP;
    end
    vol = solveAPFEqns(pdata, config, ...
        Pu=Pu, Qu=Qu, ...
        InitVm=pdata.snapshot.var.val.Vm, ...
        InitVa=pdata.snapshot.var.val.Va, ...
        InitPs=InitPs, PsDistribs=PsDistribs);
    dPsdC_(i) = dPsdC_(i) - vol.Ps; dPsdCTimes_(i) = dPsdCTimes_(i) + toc(t0);
    fun = calcMetric(pdata, vol.Vm, vol.Va, vol.Ps, getGradient=false);
    dFdC_(i) = dFdC_(i) - fun.F; dFdCTimes_(i) = dFdCTimes_(i) + toc(t0);
end
denom = 2 * FINDIF_STEP; dPsdC_ = dPsdC_ ./ denom; dFdC_ = dFdC_ ./ denom;
clear N_u denom;

%% Perturbations
Eps = [0.1*FINDIF_STEP; FINDIF_STEP; 10*FINDIF_STEP]; Eps = [-flip(Eps); Eps];
N = numel(Eps);
[apfVm, apfVa, apfPs] = deal(zeros([N, pdata.N_b]), zeros([N, pdata.N_b]), zeros([N, 1]));
[apxVm, apxVa, apxPs] = deal(zeros([N, pdata.N_b]), zeros([N, pdata.N_b]), zeros([N, 1]));
apxVa(:, pdata.ref_bus) = pdata.va_ref;
[Pu, Qu] = deal(apf1.Pu, apf1.Qu);
[Vm, Va, Ps] = deal(apf2.Vm, apf2.Va, apf2.Ps);
nonref_buses = (1:pdata.N_b).'; nonref_buses = nonref_buses(pdata.are_nonref_buses);
parfor i = 1:N
    [Pu_, Qu_] = deal(Pu + Eps(i), Qu + Eps(i));
    vol = solveAPFEqns(pdata, config, ...
        Pu=Pu_, Qu=Qu_, ...
        InitVm=pdata.snapshot.var.val.Vm, ...
        InitVa=pdata.snapshot.var.val.Va, ...
        InitPs=InitPs, PsDistribs=PsDistribs);
    [apfVm(i, :), apfVa(i, :), apfPs(i, :)] = deal(vol.Vm, vol.Va, vol.Ps);
    DeltaX = (DXDC * [Pu; Qu]);
    apxVm(i, :) = Vm + DeltaX(1 : pdata.N_b);
    apxVa(i, nonref_buses) = Va(nonref_buses) + DeltaX(pdata.N_b + 1 : (2 * pdata.N_b) - 1);
    apxPs(i) = Ps + DeltaX(end);
end
clear PsDistribs N Pu Qu Vm Va Ps;

%% Outro
% For processing in MATLAB
fname = sprintf("%s_mresults-%.3e", SNAPSHOT_ID, norm(dFdC - dFdC_, 2));
save(sprintf("./%s.mat", fname), ...
    "SNAPSHOT_ID", ...
    "PD_MUL_MIN", "PD_MUL_MAX", ...
    "QD_MUL_MIN", "QD_MUL_MAX", ...
    "RS_MUL_MIN", "RS_MUL_MAX", ...
    "XS_MUL_MIN", "XS_MUL_MAX", ...
    "BC_MUL_MIN", "BC_MUL_MAX", ...
    "mpopt", "config", ...
    "pdata", "apf1", "apf2", "met", ...
    "DXDC", "DXDCTimeAve", "DXDCTimeStd", ...
    "dPsdC", "dPsdCTimeAve", "dPsdCTimeStd", ...
    "DFDC", "DFDCTimeAve", "DFDCTimeStd", ...
    "dFdC", "dFdCTimeAve", "dFdCTimeStd", ...
    "dPsdC_", "dPsdCTimes_", ...
    "dFdC_", "dFdCTimes_", ...
    "Eps", ...
    "apfVm", "apfVa", "apfPs", ...
    "apxVm", "apxVa", "apxPs");
fprintf("Saved to './%s.mat'\n", fname);

% For processing in Python
[N_b, N_u] = deal(pdata.N_b, pdata.N_u);
[Ph, Qh] = deal(apf1.Ph, apf1.Qh);
[Po, Qo] = deal(apf1.Po, apf1.Qo);
[Pneed, Qneed] = deal(apf1.p_need, apf1.q_need);
[Pu, Qu] = deal(apf1.Pu, apf1.Qu);
[Vm, Va, Ps] = deal(apf2.Vm, apf2.Va, apf2.Ps);
Cft = (pdata.Cf - pdata.Ct).';
difVm = vecnorm((apfVm - apxVm).', 2).';
difVa = vecnorm(((apfVa - apxVa) * Cft).', 2).';
difPs = apfPs - apxPs;
fname = sprintf("%s_presults-%.3e", SNAPSHOT_ID, norm(dFdC - dFdC_, 2));
save(sprintf("./%s.mat", fname), ...
    "SNAPSHOT_ID", ...
    "PD_MUL_MIN", "PD_MUL_MAX", ...
    "QD_MUL_MIN", "QD_MUL_MAX", ...
    "RS_MUL_MIN", "RS_MUL_MAX", ...
    "XS_MUL_MIN", "XS_MUL_MAX", ...
    "BC_MUL_MIN", "BC_MUL_MAX", ...
    "FINDIF_STEP", ...
    "N_b", "N_u", ...
    "Ph", "Qh", "Po", "Qo", "Pneed", "Qneed", ...
    "Pu", 'Qu', "Vm", "Va", "Ps", ...
    "DXDC", "DXDCTimeAve", "DXDCTimeStd", ...
    "dPsdC", "dPsdCTimeAve", "dPsdCTimeStd", ...
    "DFDC", "DFDCTimeAve", "DFDCTimeStd", ...
    "dFdC", "dFdCTimeAve", "dFdCTimeStd", ...
    "dPsdC_", "dPsdCTimes_", ...
    "dFdC_", "dFdCTimes_", ...
    "Eps", ...
    "apfVm", "apfVa", "apfPs", ...
    "apxVm", "apxVa", "apxPs", ...
    "difVm", "difVa", "difPs");
fprintf("Saved to './%s.mat'\n", fname);

clear;
